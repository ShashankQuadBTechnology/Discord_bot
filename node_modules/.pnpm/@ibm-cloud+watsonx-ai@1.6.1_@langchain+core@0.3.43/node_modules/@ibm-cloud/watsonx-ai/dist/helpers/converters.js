"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
function convertUtilityToolToWatsonxTool(utilityTool) {
    const { name, description, input_schema, config_schema } = utilityTool;
    const parseParameters = (input, config) => {
        if (config) {
            config.properties.input = { type: 'string', description: 'Input for the tool' };
            return config;
        }
        if (input)
            return input;
        return {
            properties: {
                input: { type: 'string', description: 'Input for the tool' },
            },
            type: 'object',
        };
    };
    const tool = {
        type: 'function',
        function: {
            name,
            description,
            parameters: parseParameters(input_schema, config_schema),
        },
    };
    return tool;
}
function convertWatsonxToolCallToUtilityToolCall(toolCall) {
    const { name, arguments: stringifiedArguments } = toolCall.function;
    const jsonArguments = JSON.parse(stringifiedArguments);
    const { input } = jsonArguments, args = __rest(jsonArguments, ["input"]);
    return {
        input: input !== null && input !== void 0 ? input : args,
        tool_name: name,
        config: input ? args : {},
    };
}
module.exports = { convertUtilityToolToWatsonxTool, convertWatsonxToolCallToUtilityToolCall };
//# sourceMappingURL=converters.js.map